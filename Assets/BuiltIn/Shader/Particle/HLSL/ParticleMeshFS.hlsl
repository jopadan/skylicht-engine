// File Generated by Assets/BuildShader.py - source: [ParticleMeshFS.d.hlsl : LIGHTING]
Texture2D uTexture : register(t0);
SamplerState uTextureSampler : register(s0);
struct PS_INPUT
{
	float4 pos : SV_POSITION;
	float4 color : COLOR0;
	float2 tex0 : TEXCOORD0;
	float3 worldNormal: WORLDNORMAL;
};
cbuffer cbPerFrame
{
	float4 uColorIntensity;
	float4 uLightColor;
	float4 uLightDirection;
	float4 uSHConst[4];
};
static const float gamma = 2.2;
static const float invGamma = 1.0 / 2.2;
float3 sRGB(float3 color)
{
	return pow(color, gamma);
}
float3 linearRGB(float3 color)
{
	return pow(color, invGamma);
}
float3 shAmbient(float3 n)
{
	float3 ambientLighting = uSHConst[0].xyz +
		uSHConst[1].xyz * n.y +
		uSHConst[2].xyz * n.z +
		uSHConst[3].xyz * n.x;
	return ambientLighting * 0.75;
}
static const float PI = 3.1415926;
float4 main(PS_INPUT input) : SV_TARGET
{
	float4 texColor = uTexture.Sample(uTextureSampler, input.tex0);
	float3 color = sRGB(texColor.rgb * input.color.rgb * uColorIntensity.rgb);
	float NdotL = max(dot(input.worldNormal, uLightDirection.xyz), 0.0);
	float3 directionalLight = NdotL * sRGB(uLightColor);
	color = directionalLight * color * 0.3;
	float3 ambientLighting = shAmbient(input.worldNormal);
	color += sRGB(ambientLighting) * texColor.rgb / PI;
	return float4(color, texColor.a * input.color.a);
}
