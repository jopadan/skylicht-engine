// File Generated by Assets/BuildShader.py - source: [ParticleMeshFS.d.hlsl : SOILD,LIGHTING,DISSOLVE]
Texture2D uTexture : register(t0);
SamplerState uTextureSampler : register(s0);
struct PS_INPUT
{
	float4 pos : SV_POSITION;
	float4 color : COLOR0;
	float2 tex0 : TEXCOORD0;
	float3 worldNormal: WORLDNORMAL;
	float3 vertexPos: VERTEX_POSITION;
};
cbuffer cbPerFrame
{
	float4 uColorIntensity;
	float4 uNoiseScale;
	float4 uDissolveColor;
	float4 uLightColor;
	float4 uLightDirection;
	float4 uSHConst[4];
};
static const float gamma = 2.2;
static const float invGamma = 1.0 / 2.2;
float3 sRGB(float3 color)
{
	return pow(color, gamma);
}
float3 linearRGB(float3 color)
{
	return pow(color, invGamma);
}
float3 shAmbient(float3 n)
{
	float3 ambientLighting = uSHConst[0].xyz +
		uSHConst[1].xyz * n.y +
		uSHConst[2].xyz * n.z +
		uSHConst[3].xyz * n.x;
	return ambientLighting * 0.75;
}
static const float PI = 3.1415926;
float hash(float3 p)
{
	p = frac(p*0.3183099 + .1);
	p *= 17.0;
	return frac(p.x*p.y*p.z*(p.x + p.y + p.z));
}
float noise(in float3 x)
{
	float3 i = floor(x);
	float3 f = frac(x);
	f = f * f*(3.0 - 2.0*f);
	return lerp(
		lerp(
			lerp(hash(i + float3(0.0, 0.0, 0.0)), hash(i + float3(1.0, 0.0, 0.0)), f.x),
			lerp(hash(i + float3(0.0, 1.0, 0.0)), hash(i + float3(1.0, 1.0, 0.0)), f.x), f.y
		),
		lerp(
			lerp(hash(i + float3(0.0, 0.0, 1.0)), hash(i + float3(1.0, 0.0, 1.0)), f.x),
			lerp(hash(i + float3(0.0, 1.0, 1.0)), hash(i + float3(1.0, 1.0, 1.0)), f.x), f.y
		),
		f.z);
}
static const float3x3 m = float3x3(0.00, 0.80, 0.60,
	-0.80, 0.36, -0.48,
	-0.60, -0.48, 0.64);
float pnoise(float3 q)
{
	float f = 0.5000*noise(q);
	q = mul(q, m)*2.01;
	f += 0.2500*noise(q);
	q = mul(q, m)*2.02;
	f += 0.1250*noise(q);
	q = mul(q, m)*2.03;
	f += 0.0625*noise(q);
	q = mul(q, m)*2.01;
	return -1.0 + f * 2.0;
}
float4 main(PS_INPUT input) : SV_TARGET
{
	float4 texColor = uTexture.Sample(uTextureSampler, input.tex0);
	float3 color = sRGB(texColor.rgb * input.color.rgb);
	float alpha = texColor.a * input.color.a;
	float n = pnoise(input.vertexPos * uNoiseScale.xyz);
	n = 0.5 + 0.5*n;
	float dissolve = n - (1.0 - alpha);
	if (dissolve <= 0.0)
		discard;
	float NdotL = max(dot(input.worldNormal, uLightDirection.xyz), 0.0);
	float3 directionalLight = NdotL * sRGB(uLightColor.rgb);
	color = directionalLight * color * 0.3;
	float3 ambientLighting = shAmbient(input.worldNormal);
	color += sRGB(ambientLighting * texColor.rgb) / PI;
	color += sRGB(uDissolveColor.rgb * uColorIntensity.rgb) * step(dissolve, uNoiseScale.w) * n;
	return float4(color, texColor.a * alpha);
}
