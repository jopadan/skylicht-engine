// File Generated by Assets/BuildShader.py - source: [ParticleMeshFS.d.glsl : SOILD,LIGHTING,DISSOLVE]
precision mediump float;
uniform sampler2D uTexture;
in vec2 varTexCoord0;
in vec4 varColor;
in vec3 varWorldNormal;
in vec3 varVertexPos;
out vec4 FragColor;
uniform vec4 uColorIntensity;
uniform vec4 uNoiseScale;
uniform vec4 uDissolveColor;
uniform vec4 uLightColor;
uniform vec4 uLightDirection;
uniform vec4 uSHConst[4];
const float gamma = 2.2;
const float invGamma = 1.0 / 2.2;
vec3 sRGB(vec3 color)
{
	return pow(color, vec3(gamma));
}
vec3 linearRGB(vec3 color)
{
	return pow(color, vec3(invGamma));
}
vec3 shAmbient(vec3 n)
{
	vec3 ambientLighting = uSHConst[0].xyz +
		uSHConst[1].xyz * n.y +
		uSHConst[2].xyz * n.z +
		uSHConst[3].xyz * n.x;
	return ambientLighting * 0.75;
}
const float PI = 3.1415926;
float hash(vec3 p)
{
	p = fract(p*0.3183099 + .1);
	p *= 17.0;
	return fract(p.x*p.y*p.z*(p.x + p.y + p.z));
}
float noise(in vec3 x)
{
	vec3 i = floor(x);
	vec3 f = fract(x);
	f = f * f*(3.0 - 2.0*f);
	return mix(
		mix(
			mix(hash(i + vec3(0.0, 0.0, 0.0)), hash(i + vec3(1.0, 0.0, 0.0)), f.x),
			mix(hash(i + vec3(0.0, 1.0, 0.0)), hash(i + vec3(1.0, 1.0, 0.0)), f.x),
			f.y
		),
		mix(
			mix(hash(i + vec3(0.0, 0.0, 1.0)), hash(i + vec3(1.0, 0.0, 1.0)), f.x),
			mix(hash(i + vec3(0.0, 1.0, 1.0)), hash(i + vec3(1.0, 1.0, 1.0)), f.x),
			f.y
		),
		f.z);
}
const mat3 m = mat3(0.00, 0.80, 0.60,
	-0.80, 0.36, -0.48,
	-0.60, -0.48, 0.64);
float pnoise(vec3 q)
{
	float f = 0.5000*noise(q); q = m * q*2.01;
	f += 0.2500*noise(q); q = m * q*2.02;
	f += 0.1250*noise(q); q = m * q*2.03;
	f += 0.0625*noise(q); q = m * q*2.01;
	return -1.0 + f * 2.0;
}
void main(void)
{
	vec4 texColor = texture(uTexture, varTexCoord0.xy);
	vec3 color = sRGB(texColor.rgb * varColor.rgb);
	float alpha = texColor.a * varColor.a;
	float n = pnoise(varVertexPos * uNoiseScale.xyz);
	n = 0.5 + 0.5*n;
	float dissolve = n - (1.0 - alpha);
	if (dissolve <= 0.0)
		discard;
	float NdotL = max(dot(varWorldNormal, uLightDirection.xyz), 0.0);
	vec3 directionalLight = NdotL * sRGB(uLightColor.rgb);
	color = directionalLight * color * 0.3;
	vec3 ambientLighting = shAmbient(varWorldNormal);
	color += sRGB(ambientLighting * texColor.rgb) / PI;
	color += sRGB(uDissolveColor.rgb * uColorIntensity.rgb) * step(dissolve, uNoiseScale.w) * n;
	FragColor = vec4(color, alpha);
}
