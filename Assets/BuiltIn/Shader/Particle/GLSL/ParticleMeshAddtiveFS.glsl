// File Generated by Assets/BuildShader.py - source: [ParticleMeshFS.d.glsl : LIGHTING]
precision mediump float;
uniform sampler2D uTexture;
in vec2 varTexCoord0;
in vec4 varColor;
in vec3 varWorldNormal;
in vec3 varVertexPos;
out vec4 FragColor;
uniform vec4 uColorIntensity;
uniform vec4 uLightColor;
uniform vec4 uLightDirection;
uniform vec4 uSHConst[4];
const float gamma = 2.2;
const float invGamma = 1.0 / 2.2;
vec3 sRGB(vec3 color)
{
	return pow(color, vec3(gamma));
}
vec3 linearRGB(vec3 color)
{
	return pow(color, vec3(invGamma));
}
vec3 shAmbient(vec3 n)
{
	vec3 ambientLighting = uSHConst[0].xyz +
		uSHConst[1].xyz * n.y +
		uSHConst[2].xyz * n.z +
		uSHConst[3].xyz * n.x;
	return ambientLighting * 0.75;
}
const float PI = 3.1415926;
void main(void)
{
	vec4 texColor = texture(uTexture, varTexCoord0.xy);
	vec3 color = sRGB(texColor.rgb * varColor.rgb * uColorIntensity.rgb);
	float alpha = texColor.a * varColor.a;
	float NdotL = max(dot(varWorldNormal, uLightDirection.xyz), 0.0);
	vec3 directionalLight = NdotL * sRGB(uLightColor.rgb);
	color = directionalLight * color * 0.3;
	vec3 ambientLighting = shAmbient(varWorldNormal);
	color += sRGB(ambientLighting * texColor.rgb) / PI;
	FragColor = vec4(color, alpha);
}
